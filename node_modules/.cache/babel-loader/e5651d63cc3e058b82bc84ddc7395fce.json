{"ast":null,"code":"var _jsxFileName = \"/home/prabal/desktop/projects/marchproject/instagram-clone/src/components/Posts/index.js\";\nimport React, { Component } from \"react\";\nimport \"./Posts.css\";\nimport gql from \"graphql-tag\";\nimport Post from \"../Post\";\nimport Notifier from \"../Notifier\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Posts extends Component {\n  constructor() {\n    super();\n    this.state = {\n      posts: []\n    };\n    this.offline = !navigator.onLine;\n  }\n\n  componentDidMount() {\n    // request permission\n    Notification.requestPermission();\n\n    if (this.offline) {\n      this.setState({\n        posts: JSON.parse(localStorage.getItem(\"posts\"))\n      });\n    } else {\n      // fetch the initial posts\n      this.props.apollo_client.query({\n        query: gql`\n            {\n              posts(user_id: \"a\") {\n                id\n                user {\n                  nickname\n                  avatar\n                }\n                image\n                caption\n              }\n            }\n          `\n      }).then(response => {\n        this.setState({\n          posts: response.data.posts\n        });\n        localStorage.setItem(\"posts\", JSON.stringify(response.data.posts));\n      });\n    } //  subscribe to posts channel\n\n\n    this.posts_channel = this.props.pusher.subscribe(\"posts-channel\"); // listen for a new post\n\n    this.posts_channel.bind(\"new-post\", data => {\n      this.setState({\n        posts: this.state.posts.concat(data.post)\n      }); // check for notifications\n\n      if (Notification.permission === \"granted\") {\n        try {\n          // notify user of new post\n          let notification = new Notification(\"Pusher Instagram Clone\", {\n            body: `New post from ${data.post.user.nickname}`,\n            icon: \"https://img.stackshare.io/service/115/Pusher_logo.png\",\n            image: `${data.post.image}`\n          });\n\n          notification.onclick = function (event) {\n            window.open(\"http://localhost:3000\", \"_blank\");\n          };\n        } catch (e) {\n          console.log(\"Error displaying notification\");\n        }\n      }\n    }, this);\n  }\n\n  render() {\n    const notify = this.offline ? /*#__PURE__*/_jsxDEV(Notifier, {\n      data: \"Instagram Clone: Offline Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 35\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 87\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [notify, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Posts\",\n        children: this.state.posts.slice(0).reverse().map(post => /*#__PURE__*/_jsxDEV(Post, {\n          nickname: post.user.nickname,\n          avatar: post.user.avatar,\n          image: post.image,\n          caption: post.caption\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Posts;","map":{"version":3,"sources":["/home/prabal/desktop/projects/marchproject/instagram-clone/src/components/Posts/index.js"],"names":["React","Component","gql","Post","Notifier","Posts","constructor","state","posts","offline","navigator","onLine","componentDidMount","Notification","requestPermission","setState","JSON","parse","localStorage","getItem","props","apollo_client","query","then","response","data","setItem","stringify","posts_channel","pusher","subscribe","bind","concat","post","permission","notification","body","user","nickname","icon","image","onclick","event","window","open","e","console","log","render","notify","slice","reverse","map","avatar","caption","id"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport \"./Posts.css\";\nimport gql from \"graphql-tag\";\nimport Post from \"../Post\";\nimport Notifier from \"../Notifier\";\n\nclass Posts extends Component {\n  constructor() {\n    super();\n    this.state = {\n      posts: []\n    };\n    this.offline = !navigator.onLine;\n  }\n  componentDidMount() {\n    // request permission\n    Notification.requestPermission();\n\n    if (this.offline) {\n      this.setState({ posts: JSON.parse(localStorage.getItem(\"posts\")) });\n    } else {\n      // fetch the initial posts\n      this.props.apollo_client\n        .query({\n          query: gql`\n            {\n              posts(user_id: \"a\") {\n                id\n                user {\n                  nickname\n                  avatar\n                }\n                image\n                caption\n              }\n            }\n          `\n        })\n        .then(response => {\n          this.setState({ posts: response.data.posts });\n          localStorage.setItem(\"posts\", JSON.stringify(response.data.posts));\n        });\n    }\n    //  subscribe to posts channel\n    this.posts_channel = this.props.pusher.subscribe(\"posts-channel\");\n\n    // listen for a new post\n    this.posts_channel.bind(\n      \"new-post\",\n      data => {\n        this.setState({ posts: this.state.posts.concat(data.post) });\n\n        // check for notifications\n        if (Notification.permission === \"granted\") {\n          try {\n            // notify user of new post\n            let notification = new Notification(\"Pusher Instagram Clone\", {\n              body: `New post from ${data.post.user.nickname}`,\n              icon: \"https://img.stackshare.io/service/115/Pusher_logo.png\",\n              image: `${data.post.image}`\n            });\n\n            notification.onclick = function(event) {\n              window.open(\"http://localhost:3000\", \"_blank\");\n            };\n          } catch (e) {\n            console.log(\"Error displaying notification\");\n          }\n        }\n      },\n      this\n    );\n  }\n\n  render() {\n    const notify = this.offline ? <Notifier data=\"Instagram Clone: Offline Mode\" /> : <span />;\n    return (\n      <div>\n        {notify}\n        <div className=\"Posts\">\n          {this.state.posts\n            .slice(0)\n            .reverse()\n            .map(post => (\n              <Post\n                nickname={post.user.nickname}\n                avatar={post.user.avatar}\n                image={post.image}\n                caption={post.caption}\n                key={post.id}\n              />\n            ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}